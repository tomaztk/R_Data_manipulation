---
title: "600_02_A_Quarto"
author: "Tomaz Kastrun"
format:
  docx:
    toc: true
    toc-depth: 2
    number-sections: true
    number-depth: 3
    reference-doc: reference_word_test.docx
params:
  Species: setosa 
editor: visual
---


#  Report on analysis of Iris datasets

## Exploring data

Based on the group selected `{r} params$Species`, here is the table data.


```{r}
#| echo: false
#| eval: true
#| warning: false

library(tidyverse)

d <- iris %>%
      filter(Species == params$Species)

head(d)
```

And calculating for Species `{r} params$Species` and number of observations `{r} nrow(d)`.

## 1. Checking custom fits

This is a custom function fit:

`````{r}
#| echo: false
#| eval: true


fit <- lm(Petal.Length ~ Petal.Width, data = d)   
summary(fit) 

# and adding
d$predicted <- predict(fit)   
d$residuals <- residuals(fit) 

`````



##  Running multiple regression

You can add options to run multiple regression

```{r}
#| echo: false
#| warning: false
#| eval: true
#| label: fig-1_predictors
library(tidyverse)

d <- iris %>% select(Petal.Length, Petal.Width, Sepal.Length, Sepal.Length)


fit <- lm(Petal.Width ~ Sepal.Length + Sepal.Length + Petal.Length, data = d)

# Obtain predicted and residual values
d$predicted <- predict(fit)
d$residuals <- residuals(fit)


ggplot(d, aes(x = Sepal.Length, y = Petal.Width)) +
  geom_segment(aes(xend = Sepal.Length, yend = predicted), alpha = .2) +  # Lines to connect points
  geom_point() +  # Points of actual values
  geom_point(aes(y = predicted), shape = 1) +  # Points of predicted values
  theme_bw()
```

##  Adding multiple predictors on graph:

`````{r}
#| echo: false
#| warning: false
#| eval: true
#| label: fig-2_predictors
#| fig-cap: Iris scatterplot with multiple predictors
#| 
d %>% 
  gather(key = "iv", value = "x", -Sepal.Length, -predicted, -residuals) %>%  # Get data into shape
  ggplot(aes(x = x, y = Sepal.Length)) +  # Note use of `x` here and next line
  geom_segment(aes(xend = x, yend = predicted), alpha = .2) +
  geom_point(aes(color = residuals)) +
  scale_color_gradient2(low = "blue", mid = "white", high = "red") +
  guides(color = FALSE) +
  geom_point(aes(y = predicted), shape = 1) +
  facet_grid(~ iv, scales = "free_x") +  # Split panels here by `iv`
  theme_bw()
`````

##  Running multiple different code


###  Example with  R

Here with using R Language.

```{r}
#| eval: true
#| warning: false
#| echo: false
#| fig-cap: Iris scatter between Petal.Width and Petal.Length
iris <- iris
library(ggplot2)
library(tidyverse)

iris %>%
  select ('Petal.Width', 'Petal.Length') %>%
  ggplot(aes(x=Petal.Length,y=Petal.Width))+
  geom_point()+
  geom_smooth(method="lm")

```

###  Example with Python

Example with Python

```{python}
#| eval: true
#| warning: false
#| echo: true
a = 1
```

And overall it is irrelevant the origin of language. and mixing the languages


#  Conclusion

The results show bigger residuals and predicting the multiple variate regression without filtering the species, to be "interesting" idea. 

::: {.callout-note appearance="simple"}
## Pay Attention

This analysis is fictitious and does not provide any real results
:::

