---
title: "600_02_Quarto"
author: "Tomaz Kastrun"
format:
  docx:
    toc: true
    toc-depth: 2
    number-sections: true
    number-depth: 3
    reference-doc: reference_word_test.docx
editor: visual
---

# Report on analysis of Iris datasets

This is a custom function fit:

```{r}
#| echo: true
#| eval: false

library(tidyverse)
s
d <- iris
fit <- lm(Petal.Length ~ Petal.Width, data = d)   
summary(fit) 

# and adding
d$predicted <- predict(fit)   
d$residuals <- residuals(fit) 

d %>% 
    select(Petal.Length, predicted, residuals) %>% 
    head()

```

You can add options to run multiple regression

```{r}
#| echo: false
#| warning: false
#| eval: true

library(tidyverse)

d <- iris %>% select(Petal.Length, Petal.Width, Sepal.Length, Sepal.Length)


fit <- lm(Petal.Width ~ Sepal.Length + Sepal.Length + Petal.Length, data = d)

# Obtain predicted and residual values
d$predicted <- predict(fit)
d$residuals <- residuals(fit)


ggplot(d, aes(x = Sepal.Length, y = Petal.Width)) +
  geom_segment(aes(xend = Sepal.Length, yend = predicted), alpha = .2) +  # Lines to connect points
  geom_point() +  # Points of actual values
  geom_point(aes(y = predicted), shape = 1) +  # Points of predicted values
  theme_bw()
```

The `echo: false` option disables the printing of code (only output is displayed).

### Running Code in R

Here with using R Language.

```{r}
#| eval: true
#| warning: false
#| echo: false
#| fig-cap: Iris scatter between Petal.Width and Petal.Length
iris <- iris
library(ggplot2)
library(tidyverse)

iris %>%
  select ('Petal.Width', 'Petal.Length') %>%
  ggplot(aes(x=Petal.Length,y=Petal.Width))+
  geom_point()+
  geom_smooth(method="lm")

```

### Running Code in Py

And here is to use with Python:

```{python}
a = 1
```

And overall it is irrelevant the origin of language.

::: {custom-style="Poetry"}
This is overall job!
:::
